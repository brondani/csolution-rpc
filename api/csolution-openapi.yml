openapi: 3.1.0
info:
  title: csolution rpc
  version: 0.0.4
  description: Specification of remote procedure call methods for CMSIS csolution integration
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:3000

paths:
  /rpc/GetVersion:
    post:
      summary: Get version
      description: Get version of csolution rpc server
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/GetVersionRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/GetVersionResponse'}}}
  /rpc/Shutdown:
    post:
      summary: Shutdown
      description: Shutdown csolution rpc server
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/ShutdownRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/ShutdownResponse'}}}
  /rpc/Apply:
    post:
      summary: Apply component selection changes
      description: Apply component selection changes for the given context
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/ApplyRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/ApplyResponse'}}}
  /rpc/Resolve:
    post:
      summary: Resolve trivial component dependencies
      description: Resolve trivial component dependencies for the given context
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/ResolveRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/ResolveResponse'}}}
  /rpc/LoadPacks:
    post:
      summary: Load installed and local packs
      description: Load packs indexed in the CMSIS_PACK_ROOT
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/LoadPacksRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/LoadPacksResponse'}}}
  /rpc/LoadSolution:
    post:
      summary: Load solution
      description: Load solution
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/LoadSolutionRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/LoadSolutionResponse'}}}
  /rpc/GetUsedItems:
    post:
      summary: Get used items
      description: Get used items
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/GetUsedItemsRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/GetUsedItemsResponse'}}}
  /rpc/GetPacksInfo:
    post:
      summary: Get packs information
      description: Get installed and local packs information
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/GetPacksInfoRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/GetPacksInfoResponse'}}}
  /rpc/GetDeviceList:
    post:
      summary: Get device list
      description: Get list of filtered devices
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/GetDeviceListRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/GetDeviceListResponse'}}}
  /rpc/GetDeviceInfo:
    post:
      summary: Get device data for specified device
      description: Get device data for specified device
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/GetDeviceInfoRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/GetDeviceInfoResponse'}}}
  /rpc/GetBoardList:
    post:
      summary: Get board list
      description: Get list of filtered boards
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/GetBoardListRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/GetBoardListResponse'}}}
  /rpc/GetBoardInfo:
    post:
      summary: Get data for specified board
      description: Get data for specified board
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/GetBoardInfoRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/GetBoardInfoResponse'}}}
  /rpc/GetComponentsTree:
    post:
      summary: Get components tree
      description: Get tree of filtered components, APIs, bundles and taxonomy information
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/GetComponentsTreeRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/GetComponentsTreeResponse'}}}
  /rpc/SelectComponent:
    post:
      summary: Select component
      description: Select component
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/SelectComponentRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/SelectComponentResponse'}}}
  /rpc/SelectVariant:
    post:
      summary: Select variant
      description: Select variant
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/SelectVariantRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/SelectVariantResponse'}}}
  /rpc/SelectBundle:
    post:
      summary: Select bundle
      description: Select bundle
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/SelectBundleRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/SelectBundleResponse'}}}
  /rpc/ValidateComponents:
    post:
      summary: Validate components list
      description: Validate components list
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/ValidateComponentsRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/ValidateComponentsResponse'}}}
  /rpc/GetLogMessages:
    post:
      summary: Get logged messages
      description: Get info, errors and warnings logged during processing
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/GetLogMessagesRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/GetLogMessagesResponse'}}}
  /rpc/GetDraftProjects:
    post:
      summary: Get draft projects
      description: Get reference applications, examples and solution templates
      tags: [/rpc]
      requestBody:
        content: {application/json: {schema: {$ref: '#/components/schemas/GetDraftProjectsRequest'}}}
      responses:
        '200':
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/GetDraftProjectsResponse'}}}

components:
  schemas:
    SuccessResult:
      type: object
      properties:
        success:
          type: boolean
          description: true if requested operation has been performed successfully or selection has been modified
        message:
          type: string
          description: optional error/warning/info message
      required:
        - success
    Common:
      type: object
      properties:
        id:
          type: string
          description: Identifier
        description:
          type: string
          description: Description
        doc:
          type: string
          description: Documentation
      required:
        - id
    PackElement:
      allOf:
        - $ref: '#/components/schemas/Common'
        - properties:
            pack:
              type: string
              description: Originating pack ID
    Pack:
      allOf:
        - $ref: '#/components/schemas/Common'
        - properties:
            overview:
              type: string
              description: Pack overview
            used:
              type: boolean
              description: True when pack is used in the current context
            references:
              type: array
              description: List of yml files where the pack is referenced
              items:
                type: string
    PacksInfo:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
        - properties:
            packs:
              type: array
              description: List of packs information
              items:
                $ref: '#/components/schemas/Pack'
          required:
            - packs
    DebugInterface:
      type: object
      properties:
        adapter:
          type: string
          description: Debug adapter type
        connector:
          type: string
          description: Connector type
      required:
        - adapter
    Processor:
      type: object
      properties:
        name:
          type: string
          description: Processor name within device, optional
        core:
          type: string
          description: Processor core type
        attributes:
          type: object
          additionalProperties:
            type: string
      required:
        - core
    Memory:
      type: object
      properties:
        name:
          type: string
          description: Memory name/ID
        size:
          type: string
          description: Memory size
        access:
          type: string
          description: Memory access permissions
      required:
        - core
    Device:
      allOf:
        - $ref: '#/components/schemas/PackElement'
        - properties:
            family:
              type: string
              description: Device family
            subFamily:
              type: string
              description: Device subfamily, optional
            processors:
              type: array
              items:
                $ref: '#/components/schemas/Processor'
            memories:
              type: array
              items:
                $ref: '#/components/schemas/Memory'
    DeviceList:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
        - properties:
            devices:
              type: array
              description: List of devices
              items:
                $ref: '#/components/schemas/Device'
          required:
            - devices
    DeviceInfo:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
        - properties:
            device:
              $ref: '#/components/schemas/Device'
          required:
            - device
    Board:
      allOf:
        - $ref: '#/components/schemas/PackElement'
        - properties:
            image:
              type: string
              description: Link to file or URL with board image
            devices:
              type: array
              description: List of mounted and compatible devices
              items:
                $ref: '#/components/schemas/Device'
            memories:
              type: array
              items:
                $ref: '#/components/schemas/Memory'
            debugInterfaces:
              type: array
              description: List of supported debug interfaces
              items:
                $ref: '#/components/schemas/DebugInterface'

    BoardList:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
        - properties:
            boards:
              type: array
              description: List of boards
              items:
                $ref: '#/components/schemas/Board'
          required:
            - boards
    BoardInfo:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
        - properties:
            board:
              $ref: '#/components/schemas/Board'
          required:
            - board
    Component:
      allOf:
        - $ref: '#/components/schemas/Common'
        - properties:
            pack:
              type: string
              description: Pack that defines this component
            implements:
              type: string
              description: Refers to the API that the component is based on
            maxInstances:
              type: integer
              description: Maximum of supported component instances
          required:
            - pack
    Options:
      type: object
      properties:
        layer:
          type: string
          description: Absolute path to .clayer.yml file
        explicitVersion:
          type: string
          description: 'Version requirement in SemVer syntax: https://open-cmsis-pack.github.io/cmsis-toolbox/YML-Input-Format/#name-conventions empty '
        explicitVendor:
          type: boolean
          description: Flag to prefix component ID with vendor when adding component to project or layer, false
    ComponentInstance:
      type: object
      properties:
        id:
          type: string
          description: Identifier
        selectedCount:
          type: integer
          description: Number of selected instances
        generator:
          type: string
          description: Associated generator name
        fixed:
          type: boolean
          description: Component cannot be unselected
        options:
          $ref: '#/components/schemas/Options'
        resolvedComponent:
          $ref: '#/components/schemas/Component'
      required:
        - id
        - selectedCount
    CtItem:
      type: object
      properties:
        name:
          type: string
          description: Name of element
        result:
          type: string
          description: 'Condition result: https://github.com/Open-CMSIS-Pack/devtools/blob/tools/projmgr/2.8.0/libs/rtemodel/include/RteItem.h#L78-L95'
      required:
        - name
    CtVariant:
      allOf:
        - $ref: '#/components/schemas/CtItem'
        - type: object
          properties:
            components:
              type: array
              description: Version-sorted components
              items:
                $ref: '#/components/schemas/Component'
          required:
            - components
    CtAggregate:
      allOf:
        - $ref: '#/components/schemas/CtItem'
        - type: object
          properties:
            id:
              type: string
              description: Identifier
            activeVariant:
              type: string
              description: Variant
            activeVersion:
              type: string
              description: Version
            selectedCount:
              type: integer
              description: Number of selected instances
            generator:
              type: string
              description: Associated generator name
            fixed:
              type: boolean
              description: Component cannot be unselected
            variants:
              type: array
              items:
                $ref: '#/components/schemas/CtVariant'
            options:
              $ref: '#/components/schemas/Options'
          required:
            - id
            - variants
    CtTreeItem:
      allOf:
        - $ref: '#/components/schemas/CtItem'
        - type: object
          properties:
            cgroups:
              type: array
              items:
                $ref: '#/components/schemas/CtGroup'
            aggregates:
              type: array
              items:
                $ref: '#/components/schemas/CtAggregate'
    Api:
      description: Api
      allOf:
        - $ref: '#/components/schemas/Common'
    Taxonomy:
      description: Taxonomy
      allOf:
        - $ref: '#/components/schemas/Common'
    CtGroup:
      allOf:
        - $ref: '#/components/schemas/CtTreeItem'
        - type: object
          properties:
            api:
              $ref: '#/components/schemas/Api'
            taxonomy:
              $ref: '#/components/schemas/Taxonomy'
    Bundle:
      description: Bundle
      allOf:
        - $ref: '#/components/schemas/Common'
    CtBundle:
      allOf:
        - $ref: '#/components/schemas/CtTreeItem'
        - type: object
          properties:
            bundle:
              $ref: '#/components/schemas/Bundle'
    CtClass:
      allOf:
        - $ref: '#/components/schemas/CtItem'
        - type: object
          properties:
            taxonomy:
              $ref: '#/components/schemas/Taxonomy'
            activeBundle:
              type: string
            bundles:
              type: array
              items:
                $ref: '#/components/schemas/CtBundle'
          required:
            - bundles
    CtRoot:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
        - properties:
            classes:
              type: array
              description: Array of Component Classes
              items:
                $ref: '#/components/schemas/CtClass'
          required:
            - classes
    Condition:
      type: object
      properties:
        expression:
          type: string
          description: Condition expression (accept, require, deny ...)
        aggregates:
          type: array
          description: List of aggregates related to this condition
          items:
            type: string
      required:
        - expression
    Result:
      type: object
      properties:
        result:
          type: string
          description: 'Condition result: https://github.com/Open-CMSIS-Pack/devtools/blob/tools/projmgr/2.8.0/libs/rtemodel/include/RteItem.h#L78-L95'
        id:
          type: string
          description: Component or API identifier
        aggregates:
          type: array
          description: List of aggregates related to this result
          items:
            type: string
        conditions:
          type: array
          description: List of conditions related to this result
          items:
            $ref: '#/components/schemas/Condition'
      required:
        - id
        - result
    Results:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
        - properties:
            result:
              type: string
              description: 'Condition result: https://github.com/Open-CMSIS-Pack/devtools/blob/tools/projmgr/2.8.0/libs/rtemodel/include/RteItem.h#L78-L95'
            validation:
              type: array
              items:
                $ref: '#/components/schemas/Result'
          required:
            - result
    UsedItems:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
        - properties:
            components:
              type: array
              items:
                $ref: '#/components/schemas/ComponentInstance'
            packs:
              type: array
              items:
                $ref: '#/components/schemas/Pack'
          required:
            - components
            - packs
    LogMessages:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
        - properties:
            info:
              type: array
              items:
                type: string
            errors:
              type: array
              items:
                type: string
            warnings:
              type: array
              items:
                type: string

    DraftProjectsFilter:
      type: object
      properties:
        board:
          type: string
          description: Board Identifier
        device:
          type: string
          description: Device Identifier
        environments:
          type: array
          items:
            type: string
          description: Environment names
    ExampleEnvironment:
      type: object
      properties:
        name:
          type: string
          description: Name of the environment
        file:
          type: string
          description: Project file to be loaded
        folder:
          type: string
          description: Folder containing all example files
      required:
        - name
        - file
        - folder
    ExampleProject:
      type: object
      properties:
        name:
          type: string
          description: Name of the example
        description:
          type: string
          description: Brief description
        doc:
          type: string
          description: Document that describes the example
        version:
          type: string
          description: Example version number
        archive:
          type: string
          description: Archive file containing all files and sub-folders
        pack:
          type: string
          description: Pack identifier
        environments:
          type: array
          items:
            $ref: '#/components/schemas/ExampleEnvironment'
          description: List of environments
        components:
          type: array
          items:
            type: string
          description: List of related components
        categories:
          type: array
          items:
            type: string
          description: List of categories
        keywords:
          type: array
          items:
            type: string
          description: List of keywords
      required:
        - name
        - description
        - doc
        - environments
        - pack
    SolutionTemplate:
      type: object
      properties:
        name:
          type: string
          description: Name of the template
        description:
          type: string
          description: Brief description
        file:
          type: string
          description: Name of the *.csolution.yml file
        folder:
          type: string
          description: Folder containing the template
        copyTo:
          type: string
          description: Path to copy the template into the csolution project
        pack:
          type: string
          description: Pack identifier
      required:
        - name
        - description
        - file
        - folder
        - pack
    DraftProjectsInfo:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
        - properties:
            examples:
              type: array
              items:
                $ref: '#/components/schemas/ExampleProject'
            refApps:
              type: array
              items:
                $ref: '#/components/schemas/ExampleProject'
            templates:
              type: array
              items:
                $ref: '#/components/schemas/SolutionTemplate'

    GetVersionRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request'
        - properties:
            method:
              type: string
              const: GetVersion
    GetVersionResult:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
        - properties:
            version:
              type: string
              description: Tool version
            apiVersion:
              type: string
              description: API version
    GetVersionResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/GetVersionResult'
    ShutdownRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request'
        - properties:
            method:
              type: string
              const: Shutdown
    ShutdownResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/SuccessResult'
    ApplyRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: Apply
            params:
              type: object
              properties:
                context:
                  type: string
              required:
                - context
    ApplyResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/SuccessResult'
    ResolveRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: Resolve
            params:
              type: object
              properties:
                context:
                  type: string
              required:
                - context
    ResolveResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/SuccessResult'
    LoadPacksRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request'
        - properties:
            method:
              type: string
              const: LoadPacks
    LoadPacksResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/SuccessResult'
    LoadSolutionRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: LoadSolution
            params:
              type: object
              properties:
                solution:
                  type: string
              required:
                - solution
    LoadSolutionResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/SuccessResult'
    GetPacksInfoRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: GetPacksInfo
            params:
              type: object
              properties:
                context:
                  type: string
              required:
                - context
    GetPacksInfoResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/PacksInfo'
    GetUsedItemsRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: GetUsedItems
            params:
              type: object
              properties:
                context:
                  type: string
              required:
                - context
    GetUsedItemsResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/UsedItems'
    GetDeviceListRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: GetDeviceList
            params:
              type: object
              properties:
                context:
                  type: string
                  description: Optional context to limit the list to packs used in the context
                namePattern:
                  type: string
                  description: Optional device name pattern containing wildcards
                vendor:
                  type: string
                  description: Optional vendor name to limit device list to the requested vendor
    GetDeviceListResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/DeviceList'
    GetDeviceInfoRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: GetDeviceInfo
            params:
              type: object
              properties:
                id:
                  type: string
                  description: Device ID in the format Vendor::Name, vendor prefix is optional
              required:
                - id
    GetDeviceInfoResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/DeviceInfo'
    GetBoardListRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: GetBoardList
            params:
              type: object
              properties:
                context:
                  type: string
                  description: Optional context to limit the list to packs used in the context
                namePattern:
                  type: string
                  description: Optional device name pattern containing wildcards
                vendor:
                  type: string
                  description: Optional vendor name to limit device list to the requested vendor
    GetBoardListResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/BoardList'
    GetBoardInfoRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: GetBoardInfo
            params:
              type: object
              properties:
                id:
                  type: string
                  description: Board  ID in the format Vendor::Name:Revision, vendor prefix is optional.
              required:
                - id
    GetBoardInfoResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/BoardInfo'
    GetComponentsTreeRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: GetComponentsTree
            params:
              type: object
              properties:
                context:
                  type: string
                all:
                  type: boolean
              required:
                - context
                - all
    GetComponentsTreeResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/CtRoot'
    SelectComponentRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: SelectComponent
            params:
              type: object
              properties:
                context:
                  type: string
                id:
                  type: string
                  description: component aggregate ID
                count:
                  type: integer
                  description: number of instances to select, 0 to select unselect
                options:
                  $ref: '#/components/schemas/Options'
              required:
                - context
                - id
                - count
                - options
    SelectComponentResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/SuccessResult'
    SelectVariantRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: SelectVariant
            params:
              type: object
              properties:
                context:
                  type: string
                id:
                  type: string
                  description: component aggregate ID
                variant:
                  type: string
              required:
                - context
                - id
                - variant
    SelectVariantResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
               $ref: '#/components/schemas/SuccessResult'
    SelectBundleRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: SelectBundle
            params:
              type: object
              properties:
                context:
                  type: string
                cclass:
                  type: string
                bundle:
                  type: string
              required:
                - context
                - cclass
                - bundle
    SelectBundleResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/SuccessResult'
    ValidateComponentsRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: ValidateComponents
            params:
              type: object
              properties:
                context:
                  type: string
              required:
                - context
    ValidateComponentsResponse:
       allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/Results'
    GetLogMessagesRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request'
        - properties:
            method:
              type: string
              const: GetLogMessages
    GetLogMessagesResponse:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/LogMessages'

    GetDraftProjectsRequest:
      allOf:
        - $ref: '#/x-jsonrpc-envelope-request-with-params'
        - properties:
            method:
              type: string
              const: GetDraftProjects
            params:
             type: object
             properties:
              filter:
                $ref: '#/components/schemas/DraftProjectsFilter'
             required:
               - filter  
    GetDraftProjectsResponse:
       allOf:
        - $ref: '#/x-jsonrpc-envelope-response'
        - properties:
            result:
              $ref: '#/components/schemas/DraftProjectsInfo'

x-jsonrpc-envelope-request:
  allOf:
    - $ref: '#/x-jsonrpc-envelope'
    - required:
        - method

x-jsonrpc-envelope-request-with-params:
  allOf:
    - $ref: '#/x-jsonrpc-envelope-request'
    - required:
        - params

x-jsonrpc-envelope-response:
  allOf:
    - $ref: '#/x-jsonrpc-envelope'
    - required:
        - result

x-jsonrpc-envelope:
  type: object
  properties:
    jsonrpc:
      type: string
      const: '2.0'
    id:
      type: number
  required:
    - jsonrpc
    - id
